{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { backendUrl } from \"../exports\";\nconst TokenVerification = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const checkToken = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n          const response = await fetch(`${backendUrl}auth/verify-token`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              token\n            })\n          });\n          if (response.ok) {\n            setIsLoggedIn(true);\n          } else {\n            setIsLoading(false);\n          }\n        } else {\n          setIsLoading(false);\n        }\n      } catch (error) {\n        console.error(\"Error checking token:\", error);\n        setIsLoading(false);\n      }\n    };\n    checkToken();\n  }, []);\n  return {\n    isLoading,\n    isLoggedIn\n  };\n};\n_s(TokenVerification, \"3VnebNC786TwwD7tufjv9zU8wHI=\");\n_c = TokenVerification;\nexport default TokenVerification;\nvar _c;\n$RefreshReg$(_c, \"TokenVerification\");","map":{"version":3,"names":["useState","useEffect","backendUrl","TokenVerification","_s","isLoading","setIsLoading","isLoggedIn","setIsLoggedIn","checkToken","token","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","ok","error","console","_c","$RefreshReg$"],"sources":["E:/Campusconnect/frontend/src/Hooks/TokenVerification.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { backendUrl } from \"../exports\";\r\n\r\nconst TokenVerification = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkToken = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token) {\r\n          const response = await fetch(`${backendUrl}auth/verify-token`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ token }),\r\n          });\r\n          if (response.ok) {\r\n            setIsLoggedIn(true);\r\n          } else {\r\n            setIsLoading(false);\r\n          }\r\n        } else {\r\n          setIsLoading(false);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error checking token:\", error);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkToken();\r\n  }, []);\r\n\r\n  return { isLoading, isLoggedIn };\r\n};\r\n\r\nexport default TokenVerification;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,YAAY;AAEvC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEZ,UAAW,mBAAkB,EAAE;YAC7Da,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAET;YAAM,CAAC;UAChC,CAAC,CAAC;UACF,IAAIG,QAAQ,CAACO,EAAE,EAAE;YACfZ,aAAa,CAAC,IAAI,CAAC;UACrB,CAAC,MAAM;YACLF,YAAY,CAAC,KAAK,CAAC;UACrB;QACF,CAAC,MAAM;UACLA,YAAY,CAAC,KAAK,CAAC;QACrB;MACF,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7Cf,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDG,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,SAAS;IAAEE;EAAW,CAAC;AAClC,CAAC;AAACH,EAAA,CAlCID,iBAAiB;AAAAoB,EAAA,GAAjBpB,iBAAiB;AAoCvB,eAAeA,iBAAiB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}