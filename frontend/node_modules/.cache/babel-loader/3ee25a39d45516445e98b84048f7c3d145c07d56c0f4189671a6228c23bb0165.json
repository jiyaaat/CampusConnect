{"ast":null,"code":"var _jsxFileName = \"E:\\\\Campusconnect\\\\frontend\\\\src\\\\Pages\\\\Matches.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"../Components/Navbar\";\nimport { backendUrl } from \"../exports\";\nimport Match from \"../Components/Match\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Matches = () => {\n  _s();\n  const [matchedUserIds, setMatchedUserIds] = useState([]);\n  const userId = parseInt(localStorage.getItem(\"userId\"), 10);\n  useEffect(() => {\n    const fetchMatches = async () => {\n      try {\n        const response = await fetch(`${backendUrl}matching?userId=${userId}`);\n        const data = await response.json();\n        const matches = data.matches;\n        const matchedIds = matches.reduce((acc, match) => {\n          if (match.sender_id !== userId) acc.push(parseInt(match.sender_id, 10));\n          if (match.receiver_id !== userId) acc.push(parseInt(match.receiver_id, 10));\n          return acc;\n        }, []);\n        const uniqueMatchedIds = [...new Set(matchedIds)];\n        const index = uniqueMatchedIds.indexOf(userId);\n        if (index !== -1) {\n          uniqueMatchedIds.splice(index, 1);\n        }\n        setMatchedUserIds(uniqueMatchedIds);\n      } catch (error) {\n        console.error(\"Error fetching matches:\", error);\n      }\n    };\n    fetchMatches();\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matches\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matches-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Matches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"matches-list\",\n          children: matchedUserIds.length > 0 ? matchedUserIds.map(user => /*#__PURE__*/_jsxDEV(Match, {\n            user: user\n          }, user, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 44\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No matches found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Matches, \"IDEOh/su8Q8EDeFs0Ub2o6eAPKI=\");\n_c = Matches;\nexport default Matches;\nvar _c;\n$RefreshReg$(_c, \"Matches\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","backendUrl","Match","jsxDEV","_jsxDEV","Fragment","_Fragment","Matches","_s","matchedUserIds","setMatchedUserIds","userId","parseInt","localStorage","getItem","fetchMatches","response","fetch","data","json","matches","matchedIds","reduce","acc","match","sender_id","push","receiver_id","uniqueMatchedIds","Set","index","indexOf","splice","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","user","_c","$RefreshReg$"],"sources":["E:/Campusconnect/frontend/src/Pages/Matches.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"../Components/Navbar\";\r\nimport { backendUrl } from \"../exports\";\r\nimport Match from \"../Components/Match\";\r\n\r\nconst Matches = () => {\r\n  const [matchedUserIds, setMatchedUserIds] = useState([]);\r\n  const userId = parseInt(localStorage.getItem(\"userId\"), 10);\r\n\r\n  useEffect(() => {\r\n    const fetchMatches = async () => {\r\n      try {\r\n        const response = await fetch(`${backendUrl}matching?userId=${userId}`);\r\n        const data = await response.json();\r\n        const matches = data.matches;\r\n\r\n        const matchedIds = matches.reduce((acc, match) => {\r\n          if (match.sender_id !== userId)\r\n            acc.push(parseInt(match.sender_id, 10));\r\n          if (match.receiver_id !== userId)\r\n            acc.push(parseInt(match.receiver_id, 10));\r\n          return acc;\r\n        }, []);\r\n\r\n        const uniqueMatchedIds = [...new Set(matchedIds)];\r\n\r\n        const index = uniqueMatchedIds.indexOf(userId);\r\n        if (index !== -1) {\r\n          uniqueMatchedIds.splice(index, 1);\r\n        }\r\n\r\n        setMatchedUserIds(uniqueMatchedIds);\r\n      } catch (error) {\r\n        console.error(\"Error fetching matches:\", error);\r\n      }\r\n    };\r\n\r\n    fetchMatches();\r\n  }, [userId]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"matches\">\r\n        <div className=\"matches-container\">\r\n          <h2>Matches</h2>\r\n          <div className=\"matches-list\">\r\n            {matchedUserIds.length > 0 ? (\r\n              matchedUserIds.map((user) => <Match key={user} user={user} />)\r\n            ) : (\r\n              <p>No matches found</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Matches;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}