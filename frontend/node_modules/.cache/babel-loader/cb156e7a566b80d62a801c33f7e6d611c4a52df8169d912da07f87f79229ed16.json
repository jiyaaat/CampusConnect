{"ast":null,"code":"var _jsxFileName = \"E:\\\\Campusconnect\\\\frontend\\\\src\\\\Pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { backendUrl } from \"../exports\";\nimport Card from \"../Components/Card\";\nimport Navbar from \"../Components/Navbar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const userId = localStorage.getItem(\"userId\");\n  useEffect(() => {\n    const fetchSuggestions = async () => {\n      try {\n        const response = await fetch(`${backendUrl}suggestions?userId=${userId}`);\n        const data = await response.json();\n        setSuggestions(data.suggestions);\n      } catch (error) {\n        console.error(\"Error fetching suggestions:\", error);\n      }\n    };\n    fetchSuggestions();\n  }, [userId]);\n  const handleSwipe = async (receiverId, action) => {\n    try {\n      const response = await fetch(`${backendUrl}matching/swipe?userId=${userId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          receiverId,\n          action\n        })\n      });\n      if (response.ok) {\n        const updatedSuggestions = suggestions.filter(user => user.id !== receiverId);\n        setSuggestions(updatedSuggestions);\n      } else {\n        console.error(\"Swipe action failed:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Swipe action error:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Suggestions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-card-container\",\n        children: suggestions && suggestions.length > 0 ? suggestions.map(user => /*#__PURE__*/_jsxDEV(Card, {\n          user: user,\n          onSwipe: handleSwipe\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No suggestions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"DhcVPwfWOGvs7Clfxsk39JgmNE0=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","backendUrl","Card","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","suggestions","setSuggestions","userId","localStorage","getItem","fetchSuggestions","response","fetch","data","json","error","console","handleSwipe","receiverId","action","method","headers","body","JSON","stringify","ok","updatedSuggestions","filter","user","id","statusText","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","onSwipe","_c","$RefreshReg$"],"sources":["E:/Campusconnect/frontend/src/Pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { backendUrl } from \"../exports\";\r\nimport Card from \"../Components/Card\";\r\nimport Navbar from \"../Components/Navbar\";\r\n\r\nconst Home = () => {\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  useEffect(() => {\r\n    const fetchSuggestions = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `${backendUrl}suggestions?userId=${userId}`\r\n        );\r\n        const data = await response.json();\r\n        setSuggestions(data.suggestions);\r\n      } catch (error) {\r\n        console.error(\"Error fetching suggestions:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSuggestions();\r\n  }, [userId]);\r\n\r\n  const handleSwipe = async (receiverId, action) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${backendUrl}matching/swipe?userId=${userId}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ receiverId, action }),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const updatedSuggestions = suggestions.filter(\r\n          (user) => user.id !== receiverId\r\n        );\r\n        setSuggestions(updatedSuggestions);\r\n      } else {\r\n        console.error(\"Swipe action failed:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Swipe action error:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"home\">\r\n        <h2>Suggestions</h2>\r\n        <div className=\"user-card-container\">\r\n          {suggestions && suggestions.length > 0 ? (\r\n            suggestions.map((user) => (\r\n              <Card key={user.id} user={user} onSwipe={handleSwipe} />\r\n            ))\r\n          ) : (\r\n            <p>No suggestions</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}